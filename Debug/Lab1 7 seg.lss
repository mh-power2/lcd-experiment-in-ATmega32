
Lab1 7 seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dd  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000338  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000145  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
unsigned char arr[]={0x7E,0x0C,0xB6,0x9E,0xCC,0xDA,0xFA,0x0E,0xFE,0xDE};


int main(void)
{
	DDRA=0xFE; // Set Port A as output, except PA0
  82:	8e ef       	ldi	r24, 0xFE	; 254
  84:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF; // Set Port C as output
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
	DDRD=0x00; // Set Port D as input
  8a:	11 ba       	out	0x11, r1	; 17
	uint8_t counter; // Declare an  8-bit unsigned integer variable named counter
	counter=0; // Initialize counter to  0
  8c:	90 e0       	ldi	r25, 0x00	; 0

	while (1) // Infinite loop
	{
		
		// Check if the bit at offset  2 in Port D is not set
		if(!(GET_BIT(PIND,2)))
  8e:	82 99       	sbic	0x10, 2	; 16
  90:	0d c0       	rjmp	.+26     	; 0xac <main+0x2a>
		{
			if (counter==99)
  92:	93 36       	cpi	r25, 0x63	; 99
  94:	e9 f0       	breq	.+58     	; 0xd0 <main+0x4e>
			{
				counter=0;
			}
			else
			{
				counter=counter+1; // Increment counter
  96:	9f 5f       	subi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	34 e3       	ldi	r19, 0x34	; 52
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x26>
  a8:	00 00       	nop
  aa:	15 c0       	rjmp	.+42     	; 0xd6 <main+0x54>
				_delay_ms(4000); // Delay for  4000 milliseconds
			}
		}
		// Check if the bit at offset  3 in Port D is not set
		else if(!(GET_BIT(PIND,3)))
  ac:	83 99       	sbic	0x10, 3	; 16
  ae:	0d c0       	rjmp	.+26     	; 0xca <main+0x48>
		{
			if(counter==0)
  b0:	99 23       	and	r25, r25
  b2:	89 f0       	breq	.+34     	; 0xd6 <main+0x54>
			{
				counter=0;
			}
			else
			{
				counter=counter-1; // Decrement counter
  b4:	91 50       	subi	r25, 0x01	; 1
  b6:	ef ef       	ldi	r30, 0xFF	; 255
  b8:	f4 e3       	ldi	r31, 0x34	; 52
  ba:	2c e0       	ldi	r18, 0x0C	; 12
  bc:	e1 50       	subi	r30, 0x01	; 1
  be:	f0 40       	sbci	r31, 0x00	; 0
  c0:	20 40       	sbci	r18, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x44>
  c6:	00 00       	nop
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <main+0x54>
				_delay_ms(4000); // Delay for  4000 milliseconds
			}
			
		}
		// Check if the bit at offset  4 in Port D is not set
		else if(!(GET_BIT(PIND,4)))
  ca:	84 9b       	sbis	0x10, 4	; 16
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <main+0x52>
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <main+0x54>
		// Check if the bit at offset  2 in Port D is not set
		if(!(GET_BIT(PIND,2)))
		{
			if (counter==99)
			{
				counter=0;
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x54>
			
		}
		// Check if the bit at offset  4 in Port D is not set
		else if(!(GET_BIT(PIND,4)))
		{
			counter=0; // Reset counter to  0
  d4:	90 e0       	ldi	r25, 0x00	; 0
		}

		// Set bit  7 of Port C and clear bit  6
		SET_BIT(PORTC,7);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,6);
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	85 bb       	out	0x15, r24	; 21

		// Calculate the tens digit of counter
		int a=counter/10;
  e2:	2d ec       	ldi	r18, 0xCD	; 205
  e4:	92 9f       	mul	r25, r18
  e6:	21 2d       	mov	r18, r1
  e8:	11 24       	eor	r1, r1
  ea:	26 95       	lsr	r18
  ec:	26 95       	lsr	r18
  ee:	26 95       	lsr	r18
  f0:	30 e0       	ldi	r19, 0x00	; 0
		// Set the value of Port A to the value at index 'a' in the arr array
		PORTA=arr[a];
  f2:	f9 01       	movw	r30, r18
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	ed ee       	ldi	r30, 0xED	; 237
  fe:	f2 e0       	ldi	r31, 0x02	; 2
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x7e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x84>
 106:	00 00       	nop
		_delay_ms(3); // Delay for  3 milliseconds

		// Set bit  6 of Port C and clear bit  7
		SET_BIT(PORTC,6);
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,7);
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8f 77       	andi	r24, 0x7F	; 127
 112:	85 bb       	out	0x15, r24	; 21

		// Calculate the ones digit of counter
		int b=counter-(a*10);
 114:	46 ef       	ldi	r20, 0xF6	; 246
 116:	42 03       	mulsu	r20, r18
 118:	f0 01       	movw	r30, r0
 11a:	43 9f       	mul	r20, r19
 11c:	f0 0d       	add	r31, r0
 11e:	11 24       	eor	r1, r1
 120:	e9 0f       	add	r30, r25
 122:	f1 1d       	adc	r31, r1
		// Set the value of Port A to the value at index 'b' in the arr array
		PORTA=arr[b];
 124:	e0 5a       	subi	r30, 0xA0	; 160
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT(PORTC,7); // Clear bit  7 of Port C
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	85 bb       	out	0x15, r24	; 21
 132:	ed ee       	ldi	r30, 0xED	; 237
 134:	f2 e0       	ldi	r31, 0x02	; 2
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0xb4>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xba>
 13c:	00 00       	nop
 13e:	a7 cf       	rjmp	.-178    	; 0x8e <main+0xc>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
